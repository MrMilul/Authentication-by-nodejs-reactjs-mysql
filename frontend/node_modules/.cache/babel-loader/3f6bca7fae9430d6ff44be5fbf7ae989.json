{"ast":null,"code":"var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isObject = require('./isObject'),\n    isRegExp = require('./isRegExp'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n/** Used as default options for `_.truncate`. */\n\n\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n/** Used to match `RegExp` flags from their coerced string values. */\n\nvar reFlags = /\\w*$/;\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\n\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n\n  string = toString(string);\n  var strLength = string.length;\n\n  if (hasUnicode(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n\n  if (length >= strLength) {\n    return string;\n  }\n\n  var end = length - stringSize(omission);\n\n  if (end < 1) {\n    return omission;\n  }\n\n  var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n\n  if (strSymbols) {\n    end += result.length - end;\n  }\n\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n\n      separator.lastIndex = 0;\n\n      while (match = separator.exec(substring)) {\n        var newEnd = match.index;\n      }\n\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n\n  return result + omission;\n}\n\nmodule.exports = truncate;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/truncate.js"],"names":["baseToString","require","castSlice","hasUnicode","isObject","isRegExp","stringSize","stringToArray","toInteger","toString","DEFAULT_TRUNC_LENGTH","DEFAULT_TRUNC_OMISSION","reFlags","truncate","string","options","length","omission","separator","strLength","strSymbols","end","result","join","slice","undefined","search","match","substring","global","RegExp","source","exec","lastIndex","newEnd","index","indexOf","lastIndexOf","module","exports"],"mappings":"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","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isObject = require('./isObject'),\n    isRegExp = require('./isRegExp'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/** Used as default options for `_.truncate`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n  string = toString(string);\n\n  var strLength = string.length;\n  if (hasUnicode(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n  if (length >= strLength) {\n    return string;\n  }\n  var end = length - stringSize(omission);\n  if (end < 1) {\n    return omission;\n  }\n  var result = strSymbols\n    ? castSlice(strSymbols, 0, end).join('')\n    : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n  if (strSymbols) {\n    end += (result.length - end);\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        var newEnd = match.index;\n      }\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nmodule.exports = truncate;\n"]},"metadata":{},"sourceType":"script"}