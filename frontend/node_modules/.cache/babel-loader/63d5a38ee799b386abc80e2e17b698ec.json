{"ast":null,"code":"var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    baseUnary = require('./_baseUnary'),\n    castRest = require('./_castRest'),\n    isArray = require('./isArray');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeMin = Math.min;\n/**\n * Creates a function that invokes `func` with its arguments transformed.\n *\n * @static\n * @since 4.0.0\n * @memberOf _\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {...(Function|Function[])} [transforms=[_.identity]]\n *  The argument transforms.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2;\n * }\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var func = _.overArgs(function(x, y) {\n *   return [x, y];\n * }, [square, doubled]);\n *\n * func(9, 3);\n * // => [81, 6]\n *\n * func(10, 5);\n * // => [100, 10]\n */\n\nvar overArgs = castRest(function (func, transforms) {\n  transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(baseIteratee)) : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));\n  var funcsLength = transforms.length;\n  return baseRest(function (args) {\n    var index = -1,\n        length = nativeMin(args.length, funcsLength);\n\n    while (++index < length) {\n      args[index] = transforms[index].call(this, args[index]);\n    }\n\n    return apply(func, this, args);\n  });\n});\nmodule.exports = overArgs;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/overArgs.js"],"names":["apply","require","arrayMap","baseFlatten","baseIteratee","baseRest","baseUnary","castRest","isArray","nativeMin","Math","min","overArgs","func","transforms","length","funcsLength","args","index","call","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CADtB;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAFzB;AAAA,IAGIG,YAAY,GAAGH,OAAO,CAAC,iBAAD,CAH1B;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAAC,aAAD,CAJtB;AAAA,IAKIK,SAAS,GAAGL,OAAO,CAAC,cAAD,CALvB;AAAA,IAMIM,QAAQ,GAAGN,OAAO,CAAC,aAAD,CANtB;AAAA,IAOIO,OAAO,GAAGP,OAAO,CAAC,WAAD,CAPrB;AASA;;;AACA,IAAIQ,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAGL,QAAQ,CAAC,UAASM,IAAT,EAAeC,UAAf,EAA2B;AACjDA,EAAAA,UAAU,GAAIA,UAAU,CAACC,MAAX,IAAqB,CAArB,IAA0BP,OAAO,CAACM,UAAU,CAAC,CAAD,CAAX,CAAlC,GACTZ,QAAQ,CAACY,UAAU,CAAC,CAAD,CAAX,EAAgBR,SAAS,CAACF,YAAD,CAAzB,CADC,GAETF,QAAQ,CAACC,WAAW,CAACW,UAAD,EAAa,CAAb,CAAZ,EAA6BR,SAAS,CAACF,YAAD,CAAtC,CAFZ;AAIA,MAAIY,WAAW,GAAGF,UAAU,CAACC,MAA7B;AACA,SAAOV,QAAQ,CAAC,UAASY,IAAT,EAAe;AAC7B,QAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,QACIH,MAAM,GAAGN,SAAS,CAACQ,IAAI,CAACF,MAAN,EAAcC,WAAd,CADtB;;AAGA,WAAO,EAAEE,KAAF,GAAUH,MAAjB,EAAyB;AACvBE,MAAAA,IAAI,CAACC,KAAD,CAAJ,GAAcJ,UAAU,CAACI,KAAD,CAAV,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BF,IAAI,CAACC,KAAD,CAAjC,CAAd;AACD;;AACD,WAAOlB,KAAK,CAACa,IAAD,EAAO,IAAP,EAAaI,IAAb,CAAZ;AACD,GARc,CAAf;AASD,CAfsB,CAAvB;AAiBAG,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    baseUnary = require('./_baseUnary'),\n    castRest = require('./_castRest'),\n    isArray = require('./isArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Creates a function that invokes `func` with its arguments transformed.\n *\n * @static\n * @since 4.0.0\n * @memberOf _\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {...(Function|Function[])} [transforms=[_.identity]]\n *  The argument transforms.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2;\n * }\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var func = _.overArgs(function(x, y) {\n *   return [x, y];\n * }, [square, doubled]);\n *\n * func(9, 3);\n * // => [81, 6]\n *\n * func(10, 5);\n * // => [100, 10]\n */\nvar overArgs = castRest(function(func, transforms) {\n  transforms = (transforms.length == 1 && isArray(transforms[0]))\n    ? arrayMap(transforms[0], baseUnary(baseIteratee))\n    : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));\n\n  var funcsLength = transforms.length;\n  return baseRest(function(args) {\n    var index = -1,\n        length = nativeMin(args.length, funcsLength);\n\n    while (++index < length) {\n      args[index] = transforms[index].call(this, args[index]);\n    }\n    return apply(func, this, args);\n  });\n});\n\nmodule.exports = overArgs;\n"]},"metadata":{},"sourceType":"script"}