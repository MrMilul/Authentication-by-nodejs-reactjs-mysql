{"ast":null,"code":"var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\n\n\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n  start = toInteger(start);\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end === undefined || end > length ? length : toInteger(end);\n\n  if (end < 0) {\n    end += length;\n  }\n\n  end = start > end ? 0 : toLength(end);\n\n  while (start < end) {\n    array[start++] = value;\n  }\n\n  return array;\n}\n\nmodule.exports = baseFill;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/_baseFill.js"],"names":["toInteger","require","toLength","baseFill","array","value","start","end","length","undefined","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CADtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4C;AAC1C,MAAIC,MAAM,GAAGJ,KAAK,CAACI,MAAnB;AAEAF,EAAAA,KAAK,GAAGN,SAAS,CAACM,KAAD,CAAjB;;AACA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,IAAAA,KAAK,GAAG,CAACA,KAAD,GAASE,MAAT,GAAkB,CAAlB,GAAuBA,MAAM,GAAGF,KAAxC;AACD;;AACDC,EAAAA,GAAG,GAAIA,GAAG,KAAKE,SAAR,IAAqBF,GAAG,GAAGC,MAA5B,GAAsCA,MAAtC,GAA+CR,SAAS,CAACO,GAAD,CAA9D;;AACA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,IAAIC,MAAP;AACD;;AACDD,EAAAA,GAAG,GAAGD,KAAK,GAAGC,GAAR,GAAc,CAAd,GAAkBL,QAAQ,CAACK,GAAD,CAAhC;;AACA,SAAOD,KAAK,GAAGC,GAAf,EAAoB;AAClBH,IAAAA,KAAK,CAACE,KAAK,EAAN,CAAL,GAAiBD,KAAjB;AACD;;AACD,SAAOD,KAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiBR,QAAjB","sourcesContent":["var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nmodule.exports = baseFill;\n"]},"metadata":{},"sourceType":"script"}