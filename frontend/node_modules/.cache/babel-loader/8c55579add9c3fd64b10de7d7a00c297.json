{"ast":null,"code":"var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest');\n/** Error message constants. */\n\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/**\n * Creates a function that iterates over `pairs` and invokes the corresponding\n * function of the first predicate to return truthy. The predicate-function\n * pairs are invoked with the `this` binding and arguments of the created\n * function.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {Array} pairs The predicate-function pairs.\n * @returns {Function} Returns the new composite function.\n * @example\n *\n * var func = _.cond([\n *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n *   [_.stubTrue,                      _.constant('no match')]\n * ]);\n *\n * func({ 'a': 1, 'b': 2 });\n * // => 'matches A'\n *\n * func({ 'a': 0, 'b': 1 });\n * // => 'matches B'\n *\n * func({ 'a': '1', 'b': '2' });\n * // => 'no match'\n */\n\nfunction cond(pairs) {\n  var length = pairs == null ? 0 : pairs.length,\n      toIteratee = baseIteratee;\n  pairs = !length ? [] : arrayMap(pairs, function (pair) {\n    if (typeof pair[1] != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n\n    return [toIteratee(pair[0]), pair[1]];\n  });\n  return baseRest(function (args) {\n    var index = -1;\n\n    while (++index < length) {\n      var pair = pairs[index];\n\n      if (apply(pair[0], this, args)) {\n        return apply(pair[1], this, args);\n      }\n    }\n  });\n}\n\nmodule.exports = cond;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/cond.js"],"names":["apply","require","arrayMap","baseIteratee","baseRest","FUNC_ERROR_TEXT","cond","pairs","length","toIteratee","pair","TypeError","args","index","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CADtB;AAAA,IAEIE,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAF1B;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAHtB;AAKA;;;AACA,IAAII,eAAe,GAAG,qBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAIC,MAAM,GAAGD,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACC,MAAvC;AAAA,MACIC,UAAU,GAAGN,YADjB;AAGAI,EAAAA,KAAK,GAAG,CAACC,MAAD,GAAU,EAAV,GAAeN,QAAQ,CAACK,KAAD,EAAQ,UAASG,IAAT,EAAe;AACpD,QAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,IAAkB,UAAtB,EAAkC;AAChC,YAAM,IAAIC,SAAJ,CAAcN,eAAd,CAAN;AACD;;AACD,WAAO,CAACI,UAAU,CAACC,IAAI,CAAC,CAAD,CAAL,CAAX,EAAsBA,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD,GAL8B,CAA/B;AAOA,SAAON,QAAQ,CAAC,UAASQ,IAAT,EAAe;AAC7B,QAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,WAAO,EAAEA,KAAF,GAAUL,MAAjB,EAAyB;AACvB,UAAIE,IAAI,GAAGH,KAAK,CAACM,KAAD,CAAhB;;AACA,UAAIb,KAAK,CAACU,IAAI,CAAC,CAAD,CAAL,EAAU,IAAV,EAAgBE,IAAhB,CAAT,EAAgC;AAC9B,eAAOZ,KAAK,CAACU,IAAI,CAAC,CAAD,CAAL,EAAU,IAAV,EAAgBE,IAAhB,CAAZ;AACD;AACF;AACF,GARc,CAAf;AASD;;AAEDE,MAAM,CAACC,OAAP,GAAiBT,IAAjB","sourcesContent":["var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that iterates over `pairs` and invokes the corresponding\n * function of the first predicate to return truthy. The predicate-function\n * pairs are invoked with the `this` binding and arguments of the created\n * function.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {Array} pairs The predicate-function pairs.\n * @returns {Function} Returns the new composite function.\n * @example\n *\n * var func = _.cond([\n *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n *   [_.stubTrue,                      _.constant('no match')]\n * ]);\n *\n * func({ 'a': 1, 'b': 2 });\n * // => 'matches A'\n *\n * func({ 'a': 0, 'b': 1 });\n * // => 'matches B'\n *\n * func({ 'a': '1', 'b': '2' });\n * // => 'no match'\n */\nfunction cond(pairs) {\n  var length = pairs == null ? 0 : pairs.length,\n      toIteratee = baseIteratee;\n\n  pairs = !length ? [] : arrayMap(pairs, function(pair) {\n    if (typeof pair[1] != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    return [toIteratee(pair[0]), pair[1]];\n  });\n\n  return baseRest(function(args) {\n    var index = -1;\n    while (++index < length) {\n      var pair = pairs[index];\n      if (apply(pair[0], this, args)) {\n        return apply(pair[1], this, args);\n      }\n    }\n  });\n}\n\nmodule.exports = cond;\n"]},"metadata":{},"sourceType":"script"}