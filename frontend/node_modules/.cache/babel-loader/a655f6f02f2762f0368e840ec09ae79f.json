{"ast":null,"code":"var arrayEach = require('./_arrayEach'),\n    baseAssignValue = require('./_baseAssignValue'),\n    bind = require('./bind'),\n    flatRest = require('./_flatRest'),\n    toKey = require('./_toKey');\n/**\n * Binds methods of an object to the object itself, overwriting the existing\n * method.\n *\n * **Note:** This method doesn't set the \"length\" property of bound functions.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Object} object The object to bind and assign the bound methods to.\n * @param {...(string|string[])} methodNames The object method names to bind.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var view = {\n *   'label': 'docs',\n *   'click': function() {\n *     console.log('clicked ' + this.label);\n *   }\n * };\n *\n * _.bindAll(view, ['click']);\n * jQuery(element).on('click', view.click);\n * // => Logs 'clicked docs' when clicked.\n */\n\n\nvar bindAll = flatRest(function (object, methodNames) {\n  arrayEach(methodNames, function (key) {\n    key = toKey(key);\n    baseAssignValue(object, key, bind(object[key], object));\n  });\n  return object;\n});\nmodule.exports = bindAll;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/bindAll.js"],"names":["arrayEach","require","baseAssignValue","bind","flatRest","toKey","bindAll","object","methodNames","key","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAD7B;AAAA,IAEIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAFlB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAHtB;AAAA,IAIII,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAJnB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,OAAO,GAAGF,QAAQ,CAAC,UAASG,MAAT,EAAiBC,WAAjB,EAA8B;AACnDR,EAAAA,SAAS,CAACQ,WAAD,EAAc,UAASC,GAAT,EAAc;AACnCA,IAAAA,GAAG,GAAGJ,KAAK,CAACI,GAAD,CAAX;AACAP,IAAAA,eAAe,CAACK,MAAD,EAASE,GAAT,EAAcN,IAAI,CAACI,MAAM,CAACE,GAAD,CAAP,EAAcF,MAAd,CAAlB,CAAf;AACD,GAHQ,CAAT;AAIA,SAAOA,MAAP;AACD,CANqB,CAAtB;AAQAG,MAAM,CAACC,OAAP,GAAiBL,OAAjB","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseAssignValue = require('./_baseAssignValue'),\n    bind = require('./bind'),\n    flatRest = require('./_flatRest'),\n    toKey = require('./_toKey');\n\n/**\n * Binds methods of an object to the object itself, overwriting the existing\n * method.\n *\n * **Note:** This method doesn't set the \"length\" property of bound functions.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Object} object The object to bind and assign the bound methods to.\n * @param {...(string|string[])} methodNames The object method names to bind.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var view = {\n *   'label': 'docs',\n *   'click': function() {\n *     console.log('clicked ' + this.label);\n *   }\n * };\n *\n * _.bindAll(view, ['click']);\n * jQuery(element).on('click', view.click);\n * // => Logs 'clicked docs' when clicked.\n */\nvar bindAll = flatRest(function(object, methodNames) {\n  arrayEach(methodNames, function(key) {\n    key = toKey(key);\n    baseAssignValue(object, key, bind(object[key], object));\n  });\n  return object;\n});\n\nmodule.exports = bindAll;\n"]},"metadata":{},"sourceType":"script"}