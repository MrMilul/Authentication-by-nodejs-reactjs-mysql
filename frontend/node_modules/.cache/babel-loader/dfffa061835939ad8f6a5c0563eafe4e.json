{"ast":null,"code":"var arrayMap = require('./_arrayMap'),\n    baseAt = require('./_baseAt'),\n    basePullAt = require('./_basePullAt'),\n    compareAscending = require('./_compareAscending'),\n    flatRest = require('./_flatRest'),\n    isIndex = require('./_isIndex');\n/**\n * Removes elements from `array` corresponding to `indexes` and returns an\n * array of removed elements.\n *\n * **Note:** Unlike `_.at`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = ['a', 'b', 'c', 'd'];\n * var pulled = _.pullAt(array, [1, 3]);\n *\n * console.log(array);\n * // => ['a', 'c']\n *\n * console.log(pulled);\n * // => ['b', 'd']\n */\n\n\nvar pullAt = flatRest(function (array, indexes) {\n  var length = array == null ? 0 : array.length,\n      result = baseAt(array, indexes);\n  basePullAt(array, arrayMap(indexes, function (index) {\n    return isIndex(index, length) ? +index : index;\n  }).sort(compareAscending));\n  return result;\n});\nmodule.exports = pullAt;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/pullAt.js"],"names":["arrayMap","require","baseAt","basePullAt","compareAscending","flatRest","isIndex","pullAt","array","indexes","length","result","index","sort","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CADpB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAFxB;AAAA,IAGIG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAH9B;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAAC,aAAD,CAJtB;AAAA,IAKIK,OAAO,GAAGL,OAAO,CAAC,YAAD,CALrB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIM,MAAM,GAAGF,QAAQ,CAAC,UAASG,KAAT,EAAgBC,OAAhB,EAAyB;AAC7C,MAAIC,MAAM,GAAGF,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACE,MAAvC;AAAA,MACIC,MAAM,GAAGT,MAAM,CAACM,KAAD,EAAQC,OAAR,CADnB;AAGAN,EAAAA,UAAU,CAACK,KAAD,EAAQR,QAAQ,CAACS,OAAD,EAAU,UAASG,KAAT,EAAgB;AAClD,WAAON,OAAO,CAACM,KAAD,EAAQF,MAAR,CAAP,GAAyB,CAACE,KAA1B,GAAkCA,KAAzC;AACD,GAFyB,CAAR,CAEfC,IAFe,CAEVT,gBAFU,CAAR,CAAV;AAIA,SAAOO,MAAP;AACD,CAToB,CAArB;AAWAG,MAAM,CAACC,OAAP,GAAiBR,MAAjB","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseAt = require('./_baseAt'),\n    basePullAt = require('./_basePullAt'),\n    compareAscending = require('./_compareAscending'),\n    flatRest = require('./_flatRest'),\n    isIndex = require('./_isIndex');\n\n/**\n * Removes elements from `array` corresponding to `indexes` and returns an\n * array of removed elements.\n *\n * **Note:** Unlike `_.at`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = ['a', 'b', 'c', 'd'];\n * var pulled = _.pullAt(array, [1, 3]);\n *\n * console.log(array);\n * // => ['a', 'c']\n *\n * console.log(pulled);\n * // => ['b', 'd']\n */\nvar pullAt = flatRest(function(array, indexes) {\n  var length = array == null ? 0 : array.length,\n      result = baseAt(array, indexes);\n\n  basePullAt(array, arrayMap(indexes, function(index) {\n    return isIndex(index, length) ? +index : index;\n  }).sort(compareAscending));\n\n  return result;\n});\n\nmodule.exports = pullAt;\n"]},"metadata":{},"sourceType":"script"}