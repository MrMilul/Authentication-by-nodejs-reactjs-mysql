{"ast":null,"code":"var baseRest = require('./_baseRest'),\n    unzipWith = require('./unzipWith');\n/**\n * This method is like `_.zip` except that it accepts `iteratee` to specify\n * how grouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} [iteratee=_.identity] The function to combine\n *  grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n *   return a + b + c;\n * });\n * // => [111, 222]\n */\n\n\nvar zipWith = baseRest(function (arrays) {\n  var length = arrays.length,\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n  return unzipWith(arrays, iteratee);\n});\nmodule.exports = zipWith;","map":{"version":3,"sources":["/home/milul/Documents/WebProg/Projets/node authen/frontend/node_modules/lodash/zipWith.js"],"names":["baseRest","require","unzipWith","zipWith","arrays","length","iteratee","undefined","pop","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CADvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,OAAO,GAAGH,QAAQ,CAAC,UAASI,MAAT,EAAiB;AACtC,MAAIC,MAAM,GAAGD,MAAM,CAACC,MAApB;AAAA,MACIC,QAAQ,GAAGD,MAAM,GAAG,CAAT,GAAaD,MAAM,CAACC,MAAM,GAAG,CAAV,CAAnB,GAAkCE,SADjD;AAGAD,EAAAA,QAAQ,GAAG,OAAOA,QAAP,IAAmB,UAAnB,IAAiCF,MAAM,CAACI,GAAP,IAAcF,QAA/C,IAA2DC,SAAtE;AACA,SAAOL,SAAS,CAACE,MAAD,EAASE,QAAT,CAAhB;AACD,CANqB,CAAtB;AAQAG,MAAM,CAACC,OAAP,GAAiBP,OAAjB","sourcesContent":["var baseRest = require('./_baseRest'),\n    unzipWith = require('./unzipWith');\n\n/**\n * This method is like `_.zip` except that it accepts `iteratee` to specify\n * how grouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} [iteratee=_.identity] The function to combine\n *  grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n *   return a + b + c;\n * });\n * // => [111, 222]\n */\nvar zipWith = baseRest(function(arrays) {\n  var length = arrays.length,\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n  return unzipWith(arrays, iteratee);\n});\n\nmodule.exports = zipWith;\n"]},"metadata":{},"sourceType":"script"}